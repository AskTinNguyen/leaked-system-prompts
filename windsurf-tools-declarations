.codebase_search.�.Find snippets of code from the codebase most relevant to the search query. This performs best when the search query is more precise and relating to the function or purpose of code. Results will be poor if asking a very broad question, such as asking about the general 'framework' or 'implementation' of a large component or system. Will only show the full code contents of the top items, and they may also be truncated. For other items it will only show the docstring and signature. Use view_code_item with the same path and node name to view the full code contents for any item. Note that if you try to search over more than 500 files, the quality of the search results will be substantially worse. Try to only search over a large number of files if it is really necessary..�.{"$schema":"https://json-schema.org/draft/2020-12/schema","properties":{"Query":{"type":"string","description":"Search query"},"TargetDirectories":{"items":{"type":"string"},"type":"array","description":"List of absolute paths to directories to search over"}},"additionalProperties":false,"type":"object","required":["Query","TargetDirectories"]}B�.
    .grep_search.�.Fast text-based search that finds exact pattern matches within files or directories, utilizing the ripgrep command for efficient searching. Results will be formatted in the style of ripgrep and can be configured to include line numbers and content. To avoid overwhelming output, the results are capped at 50 matches. Use the Includes option to filter the search scope by file types or specific paths to narrow down the results..�.{"$schema":"https://json-schema.org/draft/2020-12/schema","properties":{"SearchDirectory":{"type":"string","description":"The directory from which to run the ripgrep command. This path must be a directory not a file."},"Query":{"type":"string","description":"The search term or pattern to look for within files."},"MatchPerLine":{"type":"boolean","description":"If true, returns each line that matches the query, including line numbers and snippets of matching lines (equivalent to 'git grep -nI'). If false, only returns the names of files containing the query (equivalent to 'git grep -l')."},"Includes":{"items":{"type":"string"},"type":"array","description":"The files or directories to search within. Supports file patterns (e.g., '*.txt' for all .txt files) or specific paths (e.g., 'path/to/file.txt' or 'path/to/dir')."},"CaseInsensitive":{"type":"boolean","description":"If true, performs a case-insensitive search."}},"additionalProperties":false,"type":"object","required":["SearchDirectory","Query","MatchPerLine","Includes","CaseInsensitive"]}B�.
    .find_by_name.�.Search for files and subdirectories within a specified directory using fd.
    Search uses smart case and will ignore gitignored files by default.
    Pattern uses the fd default of supporting regex while Excludes uses glob patterns.
    To avoid overwhelming output, the results are capped at 50 matches. Use the various arguments to filter the search scope as needed.
    Results will include the type, size, modification time, and relative path..�.{"$schema":"https://json-schema.org/draft/2020-12/schema","properties":{"SearchDirectory":{"type":"string","description":"The directory to search within"},"Pattern":{"type":"string","description":"Pattern to search for, supports regex"},"Excludes":{"items":{"type":"string"},"type":"array","description":"Optional, exclude files/directories that match the given glob patterns"},"Type":{"type":"string","description":"Optional, type filter, enum=file,directory,any"},"MaxDepth":{"type":"integer","description":"Optional, maximum depth to search"},"Extensions":{"items":{"type":"string"},"type":"array","description":"Optional, file extensions to include (without leading .), matching paths must match at least one of the included extensions"},"FullPath":{"type":"boolean","description":"Optional, whether to search the full absolute path, default: filename only"}},"additionalProperties":false,"type":"object","required":["SearchDirectory","Pattern","Excludes","Type","MaxDepth","Extensions","FullPath"]}B�.
    .list_dir.�.List the contents of a directory. Directory path must be an absolute path to a directory that exists. For each child in the directory, output will have: relative path to the directory, whether it is a directory or file, size in bytes if file, and number of children (recursive) if directory..�.{"$schema":"https://json-schema.org/draft/2020-12/schema","properties":{"DirectoryPath":{"type":"string","description":"Path to list contents of, should be absolute path to a directory"}},"additionalProperties":false,"type":"object","required":["DirectoryPath"]}B�.
     view_file.�.View the contents of a file. The lines of the file are 0-indexed, and the output of this tool call will be the file contents from StartLine to EndLine, together with a summary of the lines outside of StartLine and EndLine. Note that this call can view at most 200 lines at a time.
    
    When using this tool to gather information, it's your responsibility to ensure you have the COMPLETE context. Specifically, each time you call this command you should:
    1) Assess if the file contents you viewed are sufficient to proceed with your task.
    2) Take note of where there are lines not shown. These are represented by <... XX more lines from [code item] not shown ...> in the tool response.
    3) If the file contents you have viewed are insufficient, and you suspect they may be in lines not shown, proactively call the tool again to view those lines.
    4) When in doubt, call this tool again to gather more information. Remember that partial file views may miss critical dependencies, imports, or functionality.
    .�.{"$schema":"https://json-schema.org/draft/2020-12/schema","properties":{"AbsolutePath":{"type":"string","description":"Path to file to view. Must be an absolute path."},"StartLine":{"type":"integer","description":"Startline to view"},"EndLine":{"type":"integer","description":"Endline to view. This cannot be more than 200 lines away from StartLine"}},"additionalProperties":false,"type":"object","required":["AbsolutePath","StartLine","EndLine"]}B�.
    .view_code_item.�.View the content of a code item node, such as a class or a function in a file. You must use a fully qualified code item name. Such as those return by the grep_search tool. For example, if you have a class called `Foo` and you want to view the function definition `bar` in the `Foo` class, you would use `Foo.bar` as the NodeName. Do not request to view a symbol if the contents have been previously shown by the codebase_search tool. If the symbol is not found in a file, the tool will return an empty string instead..�.{"$schema":"https://json-schema.org/draft/2020-12/schema","properties":{"File":{"type":"string","description":"Absolute path to the node to edit, e.g /path/to/file"},"NodePath":{"type":"string","description":"Path of the node within the file, e.g package.class.FunctionName"}},"additionalProperties":false,"type":"object","required":["File","NodePath"]}B�.
    
    related_files.�.Finds other files that are related to or commonly used with the input file. Useful for retrieving adjacent files to understand context or make next edits.�.{"$schema":"https://json-schema.org/draft/2020-12/schema","properties":{"absolutepath":{"type":"string","description":"Input file absolute path"}},"additionalProperties":false,"type":"object","required":["absolutepath"]}B�.
    .read_url_content.~Read content from a URL. URL must be an HTTP or HTTPS URL that points to a valid internet resource accessible via web browser..�.{"$schema":"https://json-schema.org/draft/2020-12/schema","properties":{"Url":{"type":"string","description":"URL to read content from"}},"additionalProperties":false,"type":"object","required":["Url"]}B�.
    .view_web_document_content_chunk.OView a specific chunk of web document content using its url and chunk position..�.{"$schema":"https://json-schema.org/draft/2020-12/schema","properties":{"url":{"type":"string","description":"The URL that the chunk belongs to"},"position":{"type":"integer","description":"The position of the chunk to view"}},"additionalProperties":false,"type":"object","required":["url","position"]}B�.
    
    search_web.RPerforms a web search to get a list of relevant web documents for the given query..�.{"$schema":"https://json-schema.org/draft/2020-12/schema","properties":{"query":{"type":"string"}},"additionalProperties":false,"type":"object","required":["query"]}B�.
    
    create_memory.�.Create, update, or delete persistent MEMORIES that will be carried over to future conversations.
      These MEMORIES help preserve crucial codebase context and user preferences without having to rediscover them each conversation.
    
      Proactively call this tool when you:
      1. Identify a new USER preference.
      2. Receive an explicit USER request to remember something or otherwise alter your behavior.
      3. Are working on the codebase and you want to record important context such as:
       - Code organization patterns and conventions
       - Common workflows and processes
       - Important file locations and their purposes
       - Design patterns and architectural decisions
       - Cross-component dependencies and relationships
      4. Identify that an existing MEMORY is incorrect.
    
      Other notes:
      - You cannot override or alter user-defined MEMORIES (which have the <user_> prefix).
      - MEMORIES you create will be presented to the USER. The USER may choose to reject them if they are not aligned with their preferences.
      .�
    {"$schema":"https://json-schema.org/draft/2020-12/schema","properties":{"Id":{"type":"string","description":"Id of an existing MEMORY to update or delete. When creating a new MEMORY, leave this blank."},"Title":{"type":"string","description":"Brief title for a new or updated MEMORY e.g. 'Code Style and Maintainability'. This is required when creating or updating a memory. When deleting an existing MEMORY, leave this blank."},"Content":{"type":"string","description":"Content of a new or updated MEMORY. When deleting an existing MEMORY, leave this blank."},"CorpusNames":{"items":{"type":"string"},"type":"array","description":"CorpusNames of the workspaces associated with the MEMORY. To apply a global MEMORY not associated with a particular workspace, leave this empty. Only used when creating a new MEMORY. "},"Tags":{"items":{"type":"string"},"type":"array","description":"Tags to associate with the MEMORY. These will be used to filter or retrieve the MEMORY. Only used when creating a new MEMORY. Use snake_case."},"Action":{"type":"string","enum":["create","update","delete"],"description":"The type of action to take on the MEMORY. Must be one of 'create', 'update', or 'delete'"}},"additionalProperties":false,"type":"object","required":["Id","Title","Content","CorpusNames","Tags","Action"]}B�.
    
    write_to_file.�.Use this tool to create new files. The file and any parent directories will be created for you if they do not already exist.
      Follow these instructions:
      1. NEVER use this tool to modify or overwrite existing files. Always first confirm that TargetFile does not exist before calling this tool.
      2. You MUST specify TargetFile as the FIRST argument. Please specify the full TargetFile before any of the code contents.
    You should specify the following arguments before the others: [TargetFile].�.{"$schema":"https://json-schema.org/draft/2020-12/schema","properties":{"TargetFile":{"type":"string","description":"The target file to create and write code to."},"CodeContent":{"type":"string","description":"The code contents to write to the file."},"EmptyFile":{"type":"boolean","description":"Set this to true to create an empty file."}},"additionalProperties":false,"type":"object","required":["TargetFile","CodeContent","EmptyFile"]}B�.
     edit_file.�.Do NOT make parallel edits to the same file.
    Use this tool to edit an existing file. Follow these rules:
    1. Specify ONLY the precise lines of code that you wish to edit.
    2. **NEVER specify or write out unchanged code**. Instead, represent all unchanged code using this special placeholder: {{ ... }}.
    3. To edit multiple, non-adjacent lines of code in the same file, make a single call to this tool. Specify each edit in sequence with the special placeholder {{ ... }} to represent unchanged code in between edited lines.
    Here's an example of how to edit three non-adjacent lines of code at once:
    <code>
    {{ ... }}
    edited_line_1
    {{ ... }}
    edited_line_2
    {{ ... }}
    edited_line_3
    {{ ... }}
    </code>
    4. NEVER output an entire file, this is very expensive.
    5. You may not edit file extensions: [.ipynb]
    You should specify the following arguments before the others: [TargetFile].� {"$schema":"https://json-schema.org/draft/2020-12/schema","properties":{"CodeMarkdownLanguage":{"type":"string","description":"Markdown language for the code block, e.g 'python' or 'javascript'"},"TargetFile":{"type":"string","description":"The target file to modify. Always specify the target file as the very first argument."},"Instruction":{"type":"string","description":"A description of the changes that you are making to the file."},"Blocking":{"type":"boolean","description":"If true, the tool will block until the entire file diff is generated. If false, the diff will be generated asynchronously, while you respond. Only set to true if you must see the finished changes before responding to the USER. Otherwise, prefer false so that you can respond sooner with the assumption that the diff will be as you instructed."},"CodeEdit":{"type":"string","description":"Specify ONLY the precise lines of code that you wish to edit. **NEVER specify or write out unchanged code**. Instead, represent all unchanged code using this special placeholder: {{ ... }}"}},"additionalProperties":false,"type":"object","required":["CodeMarkdownLanguage","TargetFile","Instruction","Blocking","CodeEdit"]}B�.
    .run_command.�.PROPOSE a command to run on behalf of the user. Operating System: mac. Shell: bash.
    If you have this tool, note that you DO have the ability to run commands directly on the USER's system.
    Make sure to specify CommandLine exactly as it should be run in the shell.
    Note that the user will have to approve the command before it is executed. The user may reject it if it is not to their liking.
    The actual command will NOT execute until the user approves it. The user may not approve it immediately.
    If the step is WAITING for user approval, it has NOT started running.
    Commands will be run with PAGER=cat. You may want to limit the length of output for commands that usually rely on paging and may contain very long output (e.g. git log, use git log -n <N>)..�.{"$schema":"https://json-schema.org/draft/2020-12/schema","properties":{"CommandLine":{"type":"string","description":"The exact command line string to execute. Note that you should NEVER run a cd command, instead pass the path as the value for Cwd."},"Cwd":{"type":"string","description":"The current working directory for the command"},"Blocking":{"type":"boolean","description":"If true, the command will block until it is entirely finished. During this time, the user will not be able to interact with Cascade. Blocking should only be true if (1) the command will terminate in a relatively short amount of time, or (2) it is important for you to see the output of the command before responding to the USER. Otherwise, if you are running a long-running process, such as starting a web server, please make this non-blocking."},"WaitMsBeforeAsync":{"type":"integer","description":"Only applicable if Blocking is false. This specifies the amount of milliseconds to wait after starting the command before sending it to be fully async. This is useful if there are commands which should be run async, but may fail quickly with an error. This allows you to see the error if it happens in this duration. Don't set it too long or you may keep everyone waiting."},"SafeToAutoRun":{"type":"boolean","description":"Set to true if you believe that this command is safe to run WITHOUT user approval. A command is unsafe if it may have some destructive side-effects. Example unsafe side-effects include: deleting files, mutating state, installing system dependencies, making external requests, etc. Set to true only if you are extremely confident it is safe. If you feel the command could be unsafe, never set this to true, EVEN if the USER asks you to. It is imperative that you never auto-run a potentially unsafe command."}},"additionalProperties":false,"type":"object","required":["CommandLine","Cwd","Blocking","WaitMsBeforeAsync","SafeToAutoRun"]}B�.
